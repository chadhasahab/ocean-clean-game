import "./chunk-6LOWPV43.js";

// ../node_modules/three/examples/jsm/libs/lil-gui.module.min.js
var t = class {
  constructor(e2, i2, s2, r2, n2 = "div") {
    this.parent = e2, this.object = i2, this.property = s2, this._disabled = false, this.initialValue = this.getValue(), this.domElement = document.createElement("div"), this.domElement.classList.add("controller"), this.domElement.classList.add(r2), this.$name = document.createElement("div"), this.$name.classList.add("name"), t.nextNameID = t.nextNameID || 0, this.$name.id = "lil-gui-name-" + ++t.nextNameID, this.$widget = document.createElement(n2), this.$widget.classList.add("widget"), this.$disable = this.$widget, this.domElement.appendChild(this.$name), this.domElement.appendChild(this.$widget), this.parent.children.push(this), this.parent.controllers.push(this), this.parent.$children.appendChild(this.domElement), this._listenCallback = this._listenCallback.bind(this), this.name(s2);
  }
  name(t2) {
    return this._name = t2, this.$name.innerHTML = t2, this;
  }
  onChange(t2) {
    return this._onChange = t2, this;
  }
  _callOnChange() {
    this.parent._callOnChange(this), this._onChange !== void 0 && this._onChange.call(this, this.getValue());
  }
  onFinishChange(t2) {
    return this.onChange(t2);
  }
  reset() {
    return this.setValue(this.initialValue), this;
  }
  enable(t2 = true) {
    return this.disable(!t2);
  }
  disable(t2 = true) {
    return t2 === this._disabled || (this._disabled = t2, this.domElement.classList.toggle("disabled", t2), t2 ? this.$disable.setAttribute("disabled", "disabled") : this.$disable.removeAttribute("disabled")), this;
  }
  options(t2) {
    const e2 = this.parent.add(this.object, this.property, t2);
    return e2.name(this._name), this.destroy(), e2;
  }
  min(t2) {
    return this;
  }
  max(t2) {
    return this;
  }
  step(t2) {
    return this;
  }
  listen(t2 = true) {
    return this._listening = t2, this._listenCallbackID !== void 0 && (cancelAnimationFrame(this._listenCallbackID), this._listenCallbackID = void 0), this._listening && this._listenCallback(), this;
  }
  _listenCallback() {
    this._listenCallbackID = requestAnimationFrame(this._listenCallback);
    const t2 = this.getValue();
    t2 === this._listenValuePrev && Object(t2) !== t2 || this.updateDisplay(), this._listenValuePrev = t2;
  }
  getValue() {
    return this.object[this.property];
  }
  setValue(t2) {
    return this.object[this.property] = t2, this._callOnChange(), this.updateDisplay(), this;
  }
  updateDisplay() {
    return this;
  }
  load(t2) {
    this.setValue(t2);
  }
  save() {
    return this.getValue();
  }
  destroy() {
    this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.controllers.splice(this.parent.controllers.indexOf(this), 1), this.parent.$children.removeChild(this.domElement);
  }
};
var e = class extends t {
  constructor(t2, e2, i2) {
    super(t2, e2, i2, "boolean", "label"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "checkbox"), this.$widget.appendChild(this.$input), this.$input.addEventListener("change", () => {
      this.setValue(this.$input.checked);
    }), this.$disable = this.$input, this.updateDisplay();
  }
  updateDisplay() {
    return this.$input.checked = this.getValue(), this;
  }
};
function i(t2) {
  let e2, i2;
  return (e2 = t2.match(/(#|0x)?([a-f0-9]{6})/i)) ? i2 = e2[2] : (e2 = t2.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/)) ? i2 = parseInt(e2[1]).toString(16).padStart(2, 0) + parseInt(e2[2]).toString(16).padStart(2, 0) + parseInt(e2[3]).toString(16).padStart(2, 0) : (e2 = t2.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i)) && (i2 = e2[1] + e2[1] + e2[2] + e2[2] + e2[3] + e2[3]), !!i2 && "#" + i2;
}
var s = { isPrimitive: true, match: (t2) => typeof t2 == "string", fromHexString: i, toHexString: i };
var r = { isPrimitive: true, match: (t2) => typeof t2 == "number", fromHexString: (t2) => parseInt(t2.substring(1), 16), toHexString: (t2) => "#" + t2.toString(16).padStart(6, 0) };
var n = { isPrimitive: false, match: Array.isArray, fromHexString(t2, e2, i2 = 1) {
  const s2 = r.fromHexString(t2);
  e2[0] = (s2 >> 16 & 255) / 255 * i2, e2[1] = (s2 >> 8 & 255) / 255 * i2, e2[2] = (255 & s2) / 255 * i2;
}, toHexString: ([t2, e2, i2], s2 = 1) => r.toHexString(t2 * (s2 = 255 / s2) << 16 ^ e2 * s2 << 8 ^ i2 * s2 << 0) };
var l = { isPrimitive: false, match: (t2) => Object(t2) === t2, fromHexString(t2, e2, i2 = 1) {
  const s2 = r.fromHexString(t2);
  e2.r = (s2 >> 16 & 255) / 255 * i2, e2.g = (s2 >> 8 & 255) / 255 * i2, e2.b = (255 & s2) / 255 * i2;
}, toHexString: ({ r: t2, g: e2, b: i2 }, s2 = 1) => r.toHexString(t2 * (s2 = 255 / s2) << 16 ^ e2 * s2 << 8 ^ i2 * s2 << 0) };
var o = [s, r, n, l];
var a = class extends t {
  constructor(t2, e2, s2, r2) {
    var n2;
    super(t2, e2, s2, "color"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "color"), this.$input.setAttribute("tabindex", -1), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$text = document.createElement("input"), this.$text.setAttribute("type", "text"), this.$text.setAttribute("spellcheck", "false"), this.$text.setAttribute("aria-labelledby", this.$name.id), this.$display = document.createElement("div"), this.$display.classList.add("display"), this.$display.appendChild(this.$input), this.$widget.appendChild(this.$display), this.$widget.appendChild(this.$text), this._format = (n2 = this.initialValue, o.find((t3) => t3.match(n2))), this._rgbScale = r2, this._initialValueHexString = this.save(), this._textFocused = false;
    const l2 = () => {
      this._setValueFromHexString(this.$input.value);
    };
    this.$input.addEventListener("change", l2), this.$input.addEventListener("input", l2), this.$input.addEventListener("focus", () => {
      this.$display.classList.add("focus");
    }), this.$input.addEventListener("blur", () => {
      this.$display.classList.remove("focus");
    }), this.$text.addEventListener("input", () => {
      const t3 = i(this.$text.value);
      t3 && this._setValueFromHexString(t3);
    }), this.$text.addEventListener("focus", () => {
      this._textFocused = true, this.$text.select();
    }), this.$text.addEventListener("blur", () => {
      this._textFocused = false, this.updateDisplay();
    }), this.$disable = this.$text, this.updateDisplay();
  }
  reset() {
    return this._setValueFromHexString(this._initialValueHexString), this;
  }
  _setValueFromHexString(t2) {
    if (this._format.isPrimitive) {
      const e2 = this._format.fromHexString(t2);
      this.setValue(e2);
    } else
      this._format.fromHexString(t2, this.getValue(), this._rgbScale), this._callOnChange(), this.updateDisplay();
  }
  save() {
    return this._format.toHexString(this.getValue(), this._rgbScale);
  }
  load(t2) {
    this._setValueFromHexString(t2);
  }
  updateDisplay() {
    return this.$input.value = this._format.toHexString(this.getValue(), this._rgbScale), this._textFocused || (this.$text.value = this.$input.value.substring(1)), this.$display.style.backgroundColor = this.$input.value, this;
  }
};
var h = class extends t {
  constructor(t2, e2, i2) {
    super(t2, e2, i2, "function"), this.$button = document.createElement("button"), this.$button.appendChild(this.$name), this.$widget.appendChild(this.$button), this.$button.addEventListener("click", (t3) => {
      t3.preventDefault(), this.getValue().call(this.object);
    }), this.$button.addEventListener("touchstart", () => {
    }), this.$disable = this.$button;
  }
};
var d = class extends t {
  constructor(t2, e2, i2, s2, r2, n2) {
    super(t2, e2, i2, "number"), this._initInput(), this.min(s2), this.max(r2);
    const l2 = n2 !== void 0;
    this.step(l2 ? n2 : this._getImplicitStep(), l2), this.updateDisplay();
  }
  min(t2) {
    return this._min = t2, this._onUpdateMinMax(), this;
  }
  max(t2) {
    return this._max = t2, this._onUpdateMinMax(), this;
  }
  step(t2, e2 = true) {
    return this._step = t2, this._stepExplicit = e2, this;
  }
  updateDisplay() {
    const t2 = this.getValue();
    if (this._hasSlider) {
      const e2 = (t2 - this._min) / (this._max - this._min);
      this.$fill.style.setProperty("width", 100 * e2 + "%");
    }
    return this._inputFocused || (this.$input.value = t2), this;
  }
  _initInput() {
    this.$input = document.createElement("input"), this.$input.setAttribute("type", "text"), this.$input.setAttribute("inputmode", "numeric"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$widget.appendChild(this.$input), this.$disable = this.$input;
    const t2 = (t3) => {
      const e2 = parseFloat(this.$input.value);
      isNaN(e2) || (this._snapClampSetValue(e2 + t3), this.$input.value = this.getValue());
    };
    this.$input.addEventListener("focus", () => {
      this._inputFocused = true;
    }), this.$input.addEventListener("input", () => {
      const t3 = parseFloat(this.$input.value);
      isNaN(t3) || this.setValue(this._clamp(t3));
    }), this.$input.addEventListener("blur", () => {
      this._inputFocused = false, this.updateDisplay();
    }), this.$input.addEventListener("keydown", (e2) => {
      e2.code === "Enter" && this.$input.blur(), e2.code === "ArrowUp" && (e2.preventDefault(), t2(this._step * this._arrowKeyMultiplier(e2))), e2.code === "ArrowDown" && (e2.preventDefault(), t2(-1 * this._step * this._arrowKeyMultiplier(e2)));
    }), this.$input.addEventListener("wheel", (e2) => {
      this._inputFocused && (e2.preventDefault(), t2(this._normalizeMouseWheel(e2) * this._step));
    }, { passive: false });
  }
  _initSlider() {
    this._hasSlider = true, this.$slider = document.createElement("div"), this.$slider.classList.add("slider"), this.$fill = document.createElement("div"), this.$fill.classList.add("fill"), this.$slider.appendChild(this.$fill), this.$widget.insertBefore(this.$slider, this.$input), this.domElement.classList.add("hasSlider");
    const t2 = (t3) => {
      const e3 = this.$slider.getBoundingClientRect();
      let i3 = (s3 = t3, r3 = e3.left, n3 = e3.right, l3 = this._min, o3 = this._max, (s3 - r3) / (n3 - r3) * (o3 - l3) + l3);
      var s3, r3, n3, l3, o3;
      this._snapClampSetValue(i3);
    }, e2 = (e3) => {
      t2(e3.clientX);
    }, i2 = () => {
      this._setActiveStyle(false), window.removeEventListener("mousemove", e2), window.removeEventListener("mouseup", i2);
    };
    this.$slider.addEventListener("mousedown", (s3) => {
      t2(s3.clientX), this._setActiveStyle(true), window.addEventListener("mousemove", e2), window.addEventListener("mouseup", i2);
    });
    let s2, r2, n2 = false;
    const l2 = (e3) => {
      if (n2) {
        const i3 = e3.touches[0].clientX - s2, a2 = e3.touches[0].clientY - r2;
        Math.abs(i3) > Math.abs(a2) ? (e3.preventDefault(), t2(e3.touches[0].clientX), this._setActiveStyle(true), n2 = false) : (window.removeEventListener("touchmove", l2), window.removeEventListener("touchend", o2));
      } else
        e3.preventDefault(), t2(e3.touches[0].clientX);
    }, o2 = () => {
      this._setActiveStyle(false), window.removeEventListener("touchmove", l2), window.removeEventListener("touchend", o2);
    };
    this.$slider.addEventListener("touchstart", (e3) => {
      e3.touches.length > 1 || (this._hasScrollBar ? (s2 = e3.touches[0].clientX, r2 = e3.touches[0].clientY, n2 = true) : (e3.preventDefault(), t2(e3.touches[0].clientX), this._setActiveStyle(true), n2 = false), window.addEventListener("touchmove", l2, { passive: false }), window.addEventListener("touchend", o2));
    });
    this.$slider.addEventListener("wheel", (t3) => {
      if (Math.abs(t3.deltaX) < Math.abs(t3.deltaY) && this._hasScrollBar)
        return;
      t3.preventDefault();
      const e3 = this._normalizeMouseWheel(t3) * this._step;
      this._snapClampSetValue(this.getValue() + e3);
    }, { passive: false });
  }
  _setActiveStyle(t2) {
    this.$slider.classList.toggle("active", t2), document.body.classList.toggle("lil-gui-slider-active", t2);
  }
  _getImplicitStep() {
    return this._hasMin && this._hasMax ? (this._max - this._min) / 1e3 : 0.1;
  }
  _onUpdateMinMax() {
    !this._hasSlider && this._hasMin && this._hasMax && (this._stepExplicit || this.step(this._getImplicitStep(), false), this._initSlider(), this.updateDisplay());
  }
  _normalizeMouseWheel(t2) {
    let { deltaX: e2, deltaY: i2 } = t2;
    Math.floor(t2.deltaY) !== t2.deltaY && t2.wheelDelta && (e2 = 0, i2 = -t2.wheelDelta / 120);
    return e2 + -i2;
  }
  _arrowKeyMultiplier(t2) {
    return this._stepExplicit ? t2.shiftKey ? 10 : 1 : t2.shiftKey ? 100 : t2.altKey ? 1 : 10;
  }
  _snap(t2) {
    const e2 = Math.round(t2 / this._step) * this._step;
    return parseFloat(e2.toPrecision(15));
  }
  _clamp(t2) {
    const e2 = this._hasMin ? this._min : -1 / 0, i2 = this._hasMax ? this._max : 1 / 0;
    return Math.max(e2, Math.min(i2, t2));
  }
  _snapClampSetValue(t2) {
    this.setValue(this._clamp(this._snap(t2)));
  }
  get _hasScrollBar() {
    const t2 = this.parent.root.$children;
    return t2.scrollHeight > t2.clientHeight;
  }
  get _hasMin() {
    return this._min !== void 0;
  }
  get _hasMax() {
    return this._max !== void 0;
  }
};
var c = class extends t {
  constructor(t2, e2, i2, s2) {
    super(t2, e2, i2, "option"), this.$select = document.createElement("select"), this.$select.setAttribute("aria-labelledby", this.$name.id), this.$display = document.createElement("div"), this.$display.classList.add("display"), this._values = Array.isArray(s2) ? s2 : Object.values(s2), this._names = Array.isArray(s2) ? s2 : Object.keys(s2), this._names.forEach((t3) => {
      const e3 = document.createElement("option");
      e3.innerHTML = t3, this.$select.appendChild(e3);
    }), this.$select.addEventListener("change", () => {
      this.setValue(this._values[this.$select.selectedIndex]);
    }), this.$select.addEventListener("focus", () => {
      this.$display.classList.add("focus");
    }), this.$select.addEventListener("blur", () => {
      this.$display.classList.remove("focus");
    }), this.$widget.appendChild(this.$select), this.$widget.appendChild(this.$display), this.$disable = this.$select, this.updateDisplay();
  }
  updateDisplay() {
    const t2 = this.getValue(), e2 = this._values.indexOf(t2);
    return this.$select.selectedIndex = e2, this.$display.innerHTML = e2 === -1 ? t2 : this._names[e2], this;
  }
};
var u = class extends t {
  constructor(t2, e2, i2) {
    super(t2, e2, i2, "string"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "text"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$input.addEventListener("input", () => {
      this.setValue(this.$input.value);
    }), this.$input.addEventListener("keydown", (t3) => {
      t3.code === "Enter" && this.$input.blur();
    }), this.$widget.appendChild(this.$input), this.$disable = this.$input, this.updateDisplay();
  }
  updateDisplay() {
    return this.$input.value = this.getValue(), this;
  }
};
var p = false;
var g = class {
  constructor({ parent: t2, autoPlace: e2 = t2 === void 0, touchStyles: i2 = true, container: s2, injectStyles: r2 = true, title: n2 = "Controls", width: l2 } = {}) {
    if (this.parent = t2, this.root = t2 ? t2.root : this, this.children = [], this.controllers = [], this.folders = [], this._closed = false, this.domElement = document.createElement("div"), this.domElement.classList.add("lil-gui"), this.$title = document.createElement("div"), this.$title.classList.add("title"), this.$title.setAttribute("role", "button"), this.$title.setAttribute("aria-expanded", true), this.$title.setAttribute("tabindex", 0), this.$title.addEventListener("click", () => this.openAnimated(this._closed)), this.$title.addEventListener("keydown", (t3) => {
      t3.code !== "Enter" && t3.code !== "Space" || (t3.preventDefault(), this.$title.click());
    }), this.$title.addEventListener("touchstart", () => {
    }), this.$children = document.createElement("div"), this.$children.classList.add("children"), this.domElement.appendChild(this.$title), this.domElement.appendChild(this.$children), this.title(n2), this.parent)
      return this.parent.children.push(this), this.parent.folders.push(this), void this.parent.$children.appendChild(this.domElement);
    this.domElement.classList.add("root"), !p && r2 && (!function(t3) {
      const e3 = document.createElement("style");
      e3.innerHTML = t3;
      const i3 = document.querySelector("head link[rel=stylesheet], head style");
      i3 ? document.head.insertBefore(e3, i3) : document.head.appendChild(e3);
    }('.lil-gui{font-family:var(--font-family);font-size:var(--font-size);line-height:1;font-weight:normal;font-style:normal;text-align:left;background-color:var(--background-color);color:var(--text-color);user-select:none;-webkit-user-select:none;touch-action:manipulation;--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,"Lucida Grande","Segoe UI",Roboto,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";--font-family-mono:Menlo,Monaco,Consolas,"Droid Sans Mono",monospace,"Droid Sans Fallback";--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(.75*var(--widget-height));--scrollbar-width: 5px}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0}.lil-gui.root{width:var(--width, 245px);display:flex;flex-direction:column}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow:auto}.lil-gui.root>.children::-webkit-scrollbar{width:var(--scrollbar-width);height:var(--scrollbar-width);background:var(--background-color)}.lil-gui.root>.children::-webkit-scrollbar-thumb{border-radius:var(--scrollbar-width);background:var(--focus-color)}.lil-gui .lil-gui{--background-color:inherit;--text-color:inherit;--title-background-color:inherit;--title-text-color:inherit;--widget-color:inherit;--hover-color:inherit;--focus-color:inherit;--number-color:inherit;--string-color:inherit;--font-size:inherit;--input-font-size:inherit;--font-family:inherit;--font-family-mono:inherit;--padding:inherit;--spacing:inherit;--widget-height:inherit;--name-width:inherit;--slider-knob-width:inherit;--slider-input-width:inherit;--color-input-width:inherit;--slider-input-min-width:inherit;--color-input-min-width:inherit;--folder-indent:inherit;--widget-padding:inherit;--widget-border-radius:inherit;--checkbox-size:inherit}@media(pointer: coarse){.lil-gui.allow-touch-styles{--widget-height: 28px;--padding: 6px;--spacing: 6px;--font-size: 13px;--input-font-size: 16px;--folder-indent: 10px;--widget-padding: 0 0 0 3px;--scrollbar-width: 7px;--slider-input-min-width: 50px;--color-input-min-width: 65px}}.lil-gui.force-touch-styles{--widget-height: 28px;--padding: 6px;--spacing: 6px;--font-size: 13px;--input-font-size: 16px;--folder-indent: 10px;--widget-padding: 0 0 0 3px;--scrollbar-width: 7px;--slider-input-min-width: 50px;--color-input-min-width: 65px}.lil-gui.autoPlace{max-height:100%;position:fixed;top:0;right:15px;z-index:1001}.lil-gui .controller{display:flex;align-items:center;padding:0 var(--padding);margin:var(--spacing) 0}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none !important}.lil-gui .controller .name{min-width:var(--name-width);flex-shrink:0;white-space:pre;padding-right:var(--spacing);line-height:var(--widget-height)}.lil-gui .controller .widget{position:relative;display:flex;align-items:center;width:100%;min-height:var(--widget-height)}.lil-gui .controller.function .name{line-height:unset;padding:0}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{width:100%;height:var(--widget-height);border-radius:var(--widget-border-radius);position:relative}@media(hover: hover){.lil-gui .controller.color .display:hover:before{content:" ";display:block;position:absolute;border-radius:var(--widget-border-radius);border:1px solid #fff9;left:0;right:0;top:0;bottom:0}}.lil-gui .controller.color input[type=color]{opacity:0;width:100%;height:100%;cursor:pointer}.lil-gui .controller.color input[type=text]{margin-left:var(--spacing);font-family:var(--font-family-mono);min-width:var(--color-input-min-width);width:var(--color-input-width);flex-shrink:0}.lil-gui .controller.option select{opacity:0;position:absolute;width:100%;max-width:100%}.lil-gui .controller.option .display{position:relative;pointer-events:none;border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;word-break:break-all;padding-left:.55em;padding-right:1.75em;background:var(--widget-color)}@media(hover: hover){.lil-gui .controller.option .display.focus{background:var(--focus-color)}}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{font-family:"lil-gui";content:"\u2195";position:absolute;top:0;right:0;bottom:0;padding-right:.375em}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}@media(hover: hover){.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{margin-left:var(--spacing);width:var(--slider-input-width);min-width:var(--slider-input-min-width);flex-shrink:0}.lil-gui .controller.number .slider{width:100%;height:var(--widget-height);background-color:var(--widget-color);border-radius:var(--widget-border-radius);padding-right:var(--slider-knob-width);overflow:hidden;cursor:ew-resize;touch-action:pan-y}@media(hover: hover){.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{height:100%;border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box}.lil-gui-slider-active .lil-gui{--hover-color: var(--widget-color)}.lil-gui-slider-active *{cursor:ew-resize !important}.lil-gui .title{--title-height: calc(var(--widget-height) + var(--spacing) * 1.25);height:var(--title-height);line-height:calc(var(--title-height) - 4px);font-weight:600;padding:0 var(--padding);-webkit-tap-highlight-color:transparent;cursor:pointer;outline:none;text-decoration-skip:objects}.lil-gui .title:before{font-family:"lil-gui";content:"\u25BE";padding-right:2px;display:inline-block}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}@media(hover: hover){.lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}}.lil-gui.root>.title:focus{text-decoration:none !important}.lil-gui.closed>.title:before{content:"\u25B8"}.lil-gui.closed>.children{transform:translateY(-7px);opacity:0}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{transition-duration:300ms;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);overflow:hidden;pointer-events:none}.lil-gui .children:empty:before{content:"Empty";padding:0 var(--padding);margin:var(--spacing) 0;display:block;height:var(--widget-height);font-style:italic;line-height:var(--widget-height);opacity:.5}.lil-gui.root>.children>.lil-gui>.title{border:0 solid var(--widget-color);border-width:1px 0;transition:border-color 300ms}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;margin-left:var(--folder-indent);border-left:2px solid var(--widget-color)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;border:0;outline:none;font-family:var(--font-family);font-size:var(--input-font-size);border-radius:var(--widget-border-radius);height:var(--widget-height);background:var(--widget-color);color:var(--text-color);width:100%}@media(hover: hover){.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}}.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;height:var(--checkbox-size);width:var(--checkbox-size);border-radius:var(--widget-border-radius);text-align:center}.lil-gui input[type=checkbox]:checked:before{font-family:"lil-gui";content:"\u2713";font-size:var(--checkbox-size);line-height:var(--checkbox-size)}@media(hover: hover){.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}}.lil-gui button{-webkit-tap-highlight-color:transparent;outline:none;cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);color:var(--text-color);width:100%;height:var(--widget-height);text-transform:none;background:var(--widget-color);border-radius:var(--widget-border-radius);border:1px solid var(--widget-color);text-align:center;line-height:calc(var(--widget-height)*.725)}@media(hover: hover){.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:"lil-gui";src:url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZ5WI2hlYWQAAAMcAAAAJwAAADZfcj23aGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhjAGJgZWBgZ7RnFRdnVJELCRlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB76woyAHicY2BkYGAA4sklsQ/j+W2+MnAzpDBgAyEMYUCSg4EJxAEAvVwFCgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff")}'), p = true), s2 ? s2.appendChild(this.domElement) : e2 && (this.domElement.classList.add("autoPlace"), document.body.appendChild(this.domElement)), i2 && this.domElement.classList.add("allow-touch-styles"), l2 && this.domElement.style.setProperty("--width", l2 + "px");
  }
  add(t2, i2, s2, r2, n2) {
    if (Object(s2) === s2)
      return new c(this, t2, i2, s2);
    const l2 = t2[i2];
    switch (typeof l2) {
      case "number":
        return new d(this, t2, i2, s2, r2, n2);
      case "boolean":
        return new e(this, t2, i2);
      case "string":
        return new u(this, t2, i2);
      case "function":
        return new h(this, t2, i2);
    }
    console.error(`Failed to add controller for "${i2}"`, l2, t2);
  }
  addColor(t2, e2, i2 = 1) {
    return new a(this, t2, e2, i2);
  }
  addFolder(t2) {
    return new g({ parent: this, title: t2 });
  }
  load(t2, e2 = true) {
    if (!("controllers" in t2))
      throw new Error('Invalid load object. Should contain a "controllers" key.');
    return this.controllers.forEach((e3) => {
      e3 instanceof h || e3._name in t2.controllers && e3.load(t2.controllers[e3._name]);
    }), e2 && t2.folders && this.folders.forEach((e3) => {
      e3._title in t2.folders && e3.load(t2.folders[e3._title]);
    }), this;
  }
  save(t2 = true) {
    const e2 = { controllers: {}, folders: {} };
    return this.controllers.forEach((t3) => {
      if (!(t3 instanceof h)) {
        if (t3._name in e2.controllers)
          throw new Error(`Cannot save GUI with duplicate property "${t3._name}"`);
        e2.controllers[t3._name] = t3.save();
      }
    }), t2 && this.folders.forEach((t3) => {
      if (t3._title in e2.folders)
        throw new Error(`Cannot save GUI with duplicate folder "${t3._title}"`);
      e2.folders[t3._title] = t3.save();
    }), e2;
  }
  open(t2 = true) {
    return this._closed = !t2, this.$title.setAttribute("aria-expanded", !this._closed), this.domElement.classList.toggle("closed", this._closed), this;
  }
  close() {
    return this.open(false);
  }
  openAnimated(t2 = true) {
    return this._closed = !t2, this.$title.setAttribute("aria-expanded", !this._closed), requestAnimationFrame(() => {
      const e2 = this.$children.clientHeight;
      this.$children.style.height = e2 + "px", this.domElement.classList.add("transition");
      const i2 = (t3) => {
        t3.target === this.$children && (this.$children.style.height = "", this.domElement.classList.remove("transition"), this.$children.removeEventListener("transitionend", i2));
      };
      this.$children.addEventListener("transitionend", i2);
      const s2 = t2 ? this.$children.scrollHeight : 0;
      this.domElement.classList.toggle("closed", !t2), requestAnimationFrame(() => {
        this.$children.style.height = s2 + "px";
      });
    }), this;
  }
  title(t2) {
    return this._title = t2, this.$title.innerHTML = t2, this;
  }
  reset(t2 = true) {
    return (t2 ? this.controllersRecursive() : this.controllers).forEach((t3) => t3.reset()), this;
  }
  onChange(t2) {
    return this._onChange = t2, this;
  }
  _callOnChange(t2) {
    this.parent && this.parent._callOnChange(t2), this._onChange !== void 0 && this._onChange.call(this, { object: t2.object, property: t2.property, value: t2.getValue(), controller: t2 });
  }
  destroy() {
    this.parent && (this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.folders.splice(this.parent.folders.indexOf(this), 1)), this.domElement.parentElement && this.domElement.parentElement.removeChild(this.domElement), Array.from(this.children).forEach((t2) => t2.destroy()), this._onResize && window.removeEventListener("resize", this._onResize);
  }
  controllersRecursive() {
    let t2 = Array.from(this.controllers);
    return this.folders.forEach((e2) => {
      t2 = t2.concat(e2.controllersRecursive());
    }), t2;
  }
  foldersRecursive() {
    let t2 = Array.from(this.folders);
    return this.folders.forEach((e2) => {
      t2 = t2.concat(e2.foldersRecursive());
    }), t2;
  }
};
var lil_gui_module_min_default = g;

// dep:three_examples_jsm_libs_lil-gui_module_min_js
var three_examples_jsm_libs_lil_gui_module_min_js_default = lil_gui_module_min_default;
export {
  e as BooleanController,
  a as ColorController,
  t as Controller,
  h as FunctionController,
  g as GUI,
  d as NumberController,
  c as OptionController,
  u as StringController,
  three_examples_jsm_libs_lil_gui_module_min_js_default as default
};
/**
 * lil-gui
 * https://lil-gui.georgealways.com
 * @version 0.11.0
 * @author George Michael Brower
 * @license MIT
 */
//# sourceMappingURL=three_examples_jsm_libs_lil-gui_module_min_js.js.map
